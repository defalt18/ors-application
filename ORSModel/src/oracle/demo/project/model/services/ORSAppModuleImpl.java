package oracle.demo.project.model.services;

import java.sql.Timestamp;

import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.UUID;

import oracle.demo.project.model.entities.UserBean;
//import oracle.demo.project.model.entities.UserData;

import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Aug 05 12:12:32 IST 2022
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ORSAppModuleImpl extends ApplicationModuleImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public ORSAppModuleImpl() {
    }

    /**
     * Container's getter for CandidatesVO.
     * @return CandidatesVO
     */
    public ViewObjectImpl getCandidatesVO() {
        return (ViewObjectImpl) findViewObject("CandidatesVO");
    }

    /**
     * Container's getter for CredsVO.
     * @return CredsVO
     */
    public ViewObjectImpl getCredsVO() {
        return (ViewObjectImpl) findViewObject("CredsVO");
    }

    /**
     * Container's getter for EmployeesVO.
     * @return EmployeesVO
     */
    public ViewObjectImpl getEmployeesVO() {
        return (ViewObjectImpl) findViewObject("EmployeesVO");
    }

    /**
     * Container's getter for JobsVO1.
     * @return JobsVO1
     */
    public ViewObjectImpl getJobsVO() {
        return (ViewObjectImpl) findViewObject("JobsVO");
    }

    public UserBean validateLoginCredentials(String username, String password) {
        UserBean user = null;
        ViewObject vo = getCredsVO();
        ViewObject candidateVO = getCandidatesVO();
        
        ViewCriteria vc = vo.createViewCriteria();
        ViewCriteriaRow vcr = vc.createViewCriteriaRow();
        
        ViewCriteria candidateVC = candidateVO.createViewCriteria();
        ViewCriteriaRow candidateVCR = candidateVC.createViewCriteriaRow();
        
        vcr.setAttribute("Username", username);
        vcr.setAttribute("Password", password);
        candidateVCR.setAttribute("Username", username);
        
        vc.add(vcr);
        vo.applyViewCriteria(vc);
        
        candidateVC.add(candidateVCR);
        candidateVO.appendViewCriteria(candidateVC);
        
        vo.executeQuery();
        candidateVO.executeQuery();

        
        if (candidateVO.hasNext()) {
            
            Row row = candidateVO.next();
            Row credRow = vo.next();
            Object[] values = row.getAttributeValues();
            Object[] creds = credRow.getAttributeValues();

            ArrayList<Object> userDetails = new ArrayList<Object>(Arrays.asList(values));
            userDetails.add(creds[4]);
            
            user = new UserBean(userDetails);
        }
        
        return user;
    }

    public boolean checkIfUserAlreadyExist(String username) {
        UserBean user = validateLoginCredentials(username, "");
        if (user == null)
            return false;
        return true;
    }

    public String registerUser(String firstName, String lastName, String phoneNumber, String username, String password,
                               String skillSet) {
        ViewObject credsVO = getCredsVO();
        ViewObject candidateVO = getCandidatesVO();

        if (checkIfUserAlreadyExist(username))
            return "user already exists";

        Row newCreds = credsVO.createRow();
        newCreds.setAttribute("Username", username);
        newCreds.setAttribute("Password", password);
        newCreds.setAttribute("UserType", 0);
        credsVO.insertRow(newCreds);

        Row newUserDetail = candidateVO.createRow();

        String candidateId = UUID.randomUUID().toString();
        newUserDetail.setAttribute("Username", username);
        newUserDetail.setAttribute("Firstname", firstName);
        newUserDetail.setAttribute("Lastname", lastName);
        newUserDetail.setAttribute("Contact", phoneNumber);
        newUserDetail.setAttribute("Skillset", skillSet);
        newUserDetail.setAttribute("Candidateid", candidateId);
        candidateVO.insertRow(newUserDetail);

        credsVO.executeQuery();
        candidateVO.executeQuery();

        this.getDBTransaction().commit();

        return "success";
    }

    public String applyForJobWithId(String jobId, UserBean user) {
        
        ViewObject applicationsVO = getApplicationsVO();
        
        try {
            Timestamp sqlTimestamp = new Timestamp(System.currentTimeMillis());
            Row newApplication = applicationsVO.createRow();
            newApplication.setAttribute("Applicationstatus", "in progress");
            newApplication.setAttribute("Appliedon", sqlTimestamp);
            newApplication.setAttribute("Candidateid", user.getCandidateId());
            newApplication.setAttribute("Jobid", jobId);

            applicationsVO.insertRow(newApplication);
            applicationsVO.executeQuery();

            this.getDBTransaction().commit();
        } catch (Exception e) {
            System.out.print(e);
        }
        
        return "goToDashboard";
    }

    /**
     * Container's getter for QuestionsVO1.
     * @return QuestionsVO1
     */
    public ViewObjectImpl getQuestionsVO() {
        return (ViewObjectImpl) findViewObject("QuestionsVO");
    }

    /**
     * Container's getter for ApplicationsVO1.
     * @return ApplicationsVO1
     */
    public ViewObjectImpl getApplicationsVO() {
        return (ViewObjectImpl) findViewObject("ApplicationsVO");
    }

    /**
     * Container's getter for CandidatesVO1.
     * @return CandidatesVO1
     */
    public ViewObjectImpl getCredsForCandidates() {
        return (ViewObjectImpl) findViewObject("CredsForCandidates");
    }

    /**
     * Container's getter for SysC004695805Link1.
     * @return SysC004695805Link1
     */
    public ViewLinkImpl getSysC004695805Link1() {
        return (ViewLinkImpl) findViewLink("SysC004695805Link1");
    }
}

