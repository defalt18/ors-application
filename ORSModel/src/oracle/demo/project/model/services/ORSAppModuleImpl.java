package oracle.demo.project.model.services;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Hashtable;
import java.util.Map;
import java.util.UUID;

import oracle.demo.project.model.entities.UserBean;

import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Aug 05 12:12:32 IST 2022
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ORSAppModuleImpl extends ApplicationModuleImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public ORSAppModuleImpl() {
    }

    /**
     * Container's getter for CandidatesVO.
     * @return CandidatesVO
     */
    public ViewObjectImpl getCandidatesVO() {
        return (ViewObjectImpl) findViewObject("CandidatesVO");
    }

    /**
     * Container's getter for CredsVO.
     * @return CredsVO
     */
    public ViewObjectImpl getCredsVO() {
        return (ViewObjectImpl) findViewObject("CredsVO");
    }

    /**
     * Container's getter for EmployeesVO.
     * @return EmployeesVO
     */
    public ViewObjectImpl getEmployeesVO() {
        return (ViewObjectImpl) findViewObject("EmployeesVO");
    }

    /**
     * Container's getter for JobsVO1.
     * @return JobsVO1
     */
    public ViewObjectImpl getJobsVO() {
        return (ViewObjectImpl) findViewObject("JobsVO");
    }
    
    public UserBean validateLoginCredentials(String username, String password) {
            UserBean user = null;
            ViewObject vo = getCredsVO();
            ViewCriteria vc = vo.createViewCriteria();
            ViewCriteriaRow vcr = vc.createViewCriteriaRow();
            vcr.setAttribute("Username", username);
            vcr.setAttribute("Password", password);
            vc.add(vcr);
            vo.applyViewCriteria(vc);
            vo.executeQuery();
            if (vo.hasNext()) {
                user = new UserBean();
                Row row = vo.next();
                user.setUsername(row.getAttribute("Username").toString());
                user.setUserType(row.getAttribute("UserType").toString());
            }
            return user;
        }
    
    public UserBean getUserWithCredentials(String username, String password) {
        UserBean user = null;
        user = validateLoginCredentials(username, password);
        
        if(user == null) return null;
        
        ViewObject vo = null;
        
        if(user.getUserType().equals("0")) vo = getCandidatesVO();
        else vo = getEmployeesVO();
        
        ViewCriteria vc = vo.createViewCriteria();
        ViewCriteriaRow vcr = vc.createViewCriteriaRow();
        vcr.setAttribute("Username", username);
        vc.add(vcr);
        vo.applyViewCriteria(vc);
        vo.executeQuery();
        
        if (vo.hasNext()) {
            Row row = vo.next();
            Map details = new Hashtable();
            String[] keys = row.getAttributeNames();
            
            for(int i = 0; i < keys.length; i++) {
                
                try {
                    details.put(keys[i], row.getAttribute(keys[i]).toString());
                }
                catch (Exception e) {System.out.println(e);}
                
            }
            
            details.put("userType", user.getUserType());
            
            user = new UserBean(details);
        }
        
        return user;
    }
        
        public boolean checkIfUserAlreadyExist(String username) {
            UserBean user = validateLoginCredentials(username, "");
            if(user == null) return false;
            return true;
        }
        
        public UserBean registerUser(String firstName, String lastName, String phoneNumber, String username, String password, String skillSet) {
            ViewObject credsVO = getCredsVO();
            ViewObject candidateVO = getCandidatesVO();
            
            if(checkIfUserAlreadyExist(username))
                return null;
            
            Row newCreds = credsVO.createRow();
            newCreds.setAttribute("Username", username);
            newCreds.setAttribute("Password", password);
            newCreds.setAttribute("UserType", 0);
            credsVO.insertRow(newCreds);
            
            Row newUserDetail = candidateVO.createRow();
            
            String candidateId = UUID.randomUUID().toString();
            newUserDetail.setAttribute("Username", username);
            newUserDetail.setAttribute("Firstname", firstName);
            newUserDetail.setAttribute("Lastname", lastName);
            newUserDetail.setAttribute("Contact", phoneNumber);
            newUserDetail.setAttribute("Skillset", skillSet);
            newUserDetail.setAttribute("Candidateid", candidateId);
            candidateVO.insertRow(newUserDetail);
            
            credsVO.executeQuery();
            candidateVO.executeQuery();
            
            this.getDBTransaction().commit();
            
            Map details = new Hashtable<>();
            String[] keys = newUserDetail.getAttributeNames();
            
            for(int i = 0; i < keys.length; i++) {
                try {
                    details.put(keys[i], newUserDetail.getAttribute(keys[i]).toString());
                }
                catch (Exception e) {System.out.println(e);}
            }
            
            details.put("userType", "0");
            
            UserBean user = new UserBean(details);

            return user;
        }

    /**
     * Container's getter for InterviewProcessVO1.
     * @return InterviewProcessVO1
     */
    public ViewObjectImpl getInterviewProcessVO() {
        return (ViewObjectImpl) findViewObject("InterviewProcessVO");
    }

    /**
     * Container's getter for ApplicationsVO1.
     * @return ApplicationsVO1
     */
    public ViewObjectImpl getApplicationsVO() {
        return (ViewObjectImpl) findViewObject("ApplicationsVO");
    }

    /**
     * Container's getter for CandidatesHistoryVO1.
     * @return CandidatesHistoryVO1
     */
    public ViewObjectImpl getCandidatesHistoryVO() {
        return (ViewObjectImpl) findViewObject("CandidatesHistoryVO");
    }
}

